#!/bin/bash

function echo_err () {
    [ -z $( command -v tput ) ] && {
        >&2 echo -e "$@"
        } || {
        >&2 echo -e "$( tput setaf 1)$@$( tput sgr0 )"
    }
}

function echo_out () {
    [ -z $( command -v tput ) ] && {
        >&2 echo -e "-- $@"
        } || {
        >&2 echo -e "$( tput setaf 2)-- $@$( tput sgr0 )"
    }
}

function init-default-settings () {
    export workingdir=
    export runaslocaluser=0
    export rmcontainer=1
    export xorg=0
    export ports=
    export add_args=
}

function get-image-tag () {
    PREFIX="basti-tee/"
    SUFFIX=":latest"
    dir=$( basename $( dirname $1 ))
    echo_out "Image tag is $PREFIX$dir$SUFFIX"
    echo "$PREFIX$dir$SUFFIX"
}

function validate-dir () {
    [ -z $2 ] && label="working" || label="$2"
    [ -z "$1" ] || [ ! -d "$1" ] && {
        echo_err "No $label directory or directory does not exist."
        exit 1
    }
    echo "$( readlink -f "$1" )"
}

function build-docker-image () {
    dfile="$( dirname $1 )/Dockerfile"
    # echo_err $dfile
    docker build -t $imagetag - < $dfile
}

function re-run-docker-container () {

    # print command line
    echo_out "[com] $@"

    # resolve environment variables
    [ ! -z "$workingdir" ] && {
        workingdir=$( echo $workingdir | sed -r -e 's/[\/]+$//g' )
        echo_out "Working dir set to: $workingdir"
        flag_wdir="-v ${workingdir}:/workdir"
        } || {
        echo_out "No working dir set"
    }
    [ "$runaslocaluser" == "1" ] && {
        echo_out "Will run as user: $USER"
        flag_user="-v /etc/group:/etc/group:ro -v /etc/passwd:/etc/passwd:ro -u $( id -u $USER ):$( id -g $USER )"
        } || {
        echo_out "Will run as root"
    }
    [ "$rmcontainer" == "1" ] && {
        echo_out "Will remove container"
        flag_rm="--rm"
        } || {
        echo_out "Will keep container"
    }
    [ "$xorg" == "1" ] && {
        echo_out "Will forward Xserver"
        xhost +local:docker
        flag_video="-v /tmp/.X11-unix:/tmp/.X11-unix -e DISPLAY=$DISPLAY --device /dev/snd"
        } || {
        echo_out "Running headless"
    }
    [ ! -z "$ports" ] && {
        echo_out "Exposing ports $ports"
        for port in $( echo $ports | tr "," " " ); do
            flag_ports="$flag_ports -p ${port}:${port}"
        done
        flag_ports="$flag_ports --net=host"
        } || {
        echo_out "Not exposing any ports"
    }

    cid=$( docker ps -a | grep "$imagetag" | awk '{ print $1 }' | head -n1 )
    if [ ! -z "$cid" ] && [ "$rmcontainer" != "1" ]
    then
        echo_out "Restarting existing container with id: $cid"
        start_com="docker start -i $cid"
        echo_out "-- $start_com"
        eval $start_com
        exit
    else
        echo_out "Running container from scratch."
        dcom="docker run -ti $flag_rm $flag_wdir $flag_user $flag_video $flag_ports $add_args $imagetag $@"
        echo_out "\n\n$dcom\n"
        eval $dcom
    fi
}
